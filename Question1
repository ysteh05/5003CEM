# Import necessary libraries for random number generation and date handling
import random
import datetime

# List of valid birth place codes for Malaysian IC numbers
validBpCodes = [
    '01', '21', '22', '23', '24',    # Johor
    '02', '25', '26', '27',          # Kedah
    '03', '28', '29',                # Kelantan
    '04', '30',                      # Malacca
    '05', '31', '59',                # Negeri Sembilan
    '06', '32', '33',                # Pahang
    '07', '34', '35',                # Penang
    '08', '36', '37', '38', '39',    # Perak
    '09', '40',                      # Perlis
    '10', '41', '42', '43', '44',    # Selangor
    '11', '45', '46',                # Terengganu
    '12', '47', '48', '49',          # Sabah
    '13', '50', '51', '52', '53',    # Sarawak
    '14', '54', '55', '56', '57',    # FT Kuala Lumpur
    '15', '58',                      # FT Labuan
    '16',                            # FT Putrajaya
    '60', '61', '62', '63', '64', '65', '66', '67', '68', '71', '72', # Countries
    '74', '75', '76', '77', '78', '79', 
    '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '98', '99'
]

def folding(number):
    # Implement folding method for hash function
    # Divides the number into chunks of 4 digits and sums them
    num = str(number)
    length = len(num)
    foldingSum = 0
    n = (length // 4)
    for i in range(n):
        # Extract 4-digit chunks and add to sum
        extract = int(num[(i*4):((i+1)*4)])
        foldingSum += extract
    if length % 4 != 0:
        # Handle remaining digits if number length is not divisible by 4
        remainDigit = length % 4
        remainNumber = int(num[-remainDigit:])
        foldingSum += remainNumber
    return foldingSum

def hashFunction(icNum, tableSize):
    # Calculate hash code using folding method and modulo operation
    hashCode = folding(icNum)
    return hashCode % tableSize

def generateRandomDate(startDate, endDate):
    # Generate a random date between the given start and end dates
    timeBetweenDates = endDate - startDate
    daysBetweenDates = timeBetweenDates.days
    randomNumberOfDays = random.randint(0, daysBetweenDates)
    randomDate = startDate + datetime.timedelta(days=randomNumberOfDays)
    return randomDate

def generateIcNumber():
    # Generate a random Malaysian IC number with valid format
    # Format: YYMMDD-BP-####, where:
    # YYMMDD: Date of birth
    # BP: Birth place code
    # ####: Random serial number
    startDate = datetime.date(1925, 1, 1)
    endDate = datetime.date(2024, 12, 31)
    dob = generateRandomDate(startDate, endDate)
    yymmdd = dob.strftime('%y%m%d')  # Format date as YYMMDD
    bp = random.choice(validBpCodes)  # Select random birth place code
    serial = str(random.randint(0, 9999)).zfill(4)  # Generate 4-digit serial number with leading zeros
    return yymmdd + bp + serial

def insertIntoHashTable(icNumbers, tableSize):
    # Insert IC numbers into a hash table and count collisions
    # Uses separate chaining for collision resolution
    table = [[] for _ in range(tableSize)]  # Initialize empty hash table with chains
    collisions = 0
    for ic in icNumbers:
        hashIndex = hashFunction(ic, tableSize)
        if table[hashIndex]:  # If slot already has an entry, it's a collision
            collisions += 1
        table[hashIndex].append(ic)  # Add IC to the chain at calculated index
    return collisions

def main():
    # Main function to test hash table performance with different table sizes
    numRounds = 10  # Number of test rounds
    numIcNumbers = 1000  # Number of IC numbers to generate per round
    tableSizes = [1009, 2003]  # Prime numbers chosen as hash table sizes
    totalCollisions = {size: [] for size in tableSizes}  # Track collisions for each table size

    for roundNum in range(1, numRounds + 1):
        print(f"--- Round {roundNum} ---")
        # Generate unique IC numbers
        icNumbers = set()
        while len(icNumbers) < numIcNumbers:
            icNumbers.add(generateIcNumber())
        icNumbers = list(icNumbers)
        
        # Test each table size
        for size in tableSizes:
            collisions = insertIntoHashTable(icNumbers, size)
            totalCollisions[size].append(collisions)
            print(f"Table size {size}: Collisions = {collisions}")

    # Print summary statistics
    print("\n=== Summary ===")
    for size in tableSizes:
        avgCollisions = sum(totalCollisions[size]) / numRounds
        print(f"Hash Table Size {size}:")
        for roundNum, col in enumerate(totalCollisions[size], 1):
            print(f"  Round {roundNum}: {col} collisions")
        print(f"  Average collisions: {avgCollisions:.2f}")

if __name__ == "__main__":
    # Execute main function when script is run directly
    main()
