import random
import threading
import time

def generate_random_numbers():
    return [random.randint(0, 10_000) for _ in range(100)]

def multithread_round():
    results = [None, None, None]

    def worker(slot_index):
        results[slot_index] = generate_random_numbers()

    threads = []
    start_ns = time.perf_counter_ns()

    for i in range(3):
        t = threading.Thread(target=worker, args=(i,))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    end_ns = time.perf_counter_ns()
    return end_ns - start_ns

def non_multithread_round():
    start_ns = time.perf_counter_ns()
    for _ in range(3):
        generate_random_numbers()
    end_ns = time.perf_counter_ns()
    return end_ns - start_ns

def run_tests(rounds: int = 10):
    multithread_time_list = []
    non_multithread_time_list = []

    # Column widths (first wide enough for “AVERAGE”)
    width_round          = 10
    width_multithread    = 25
    width_non_multithread = 30
    width_difference     = 15
    width_percentage     = 25

    header = (
        f"{'Round':^{width_round}} | "
        f"{'Multithreading Time (ns)':^{width_multithread}} | "
        f"{'Non-Multithreading Time (ns)':^{width_non_multithread}} | "
        f"{'Difference (ns)':^{width_difference}} | "
        f"{'Percentage Difference':^{width_percentage}}"
    )
    print(header)
    print("-" * len(header))

    for round_number in range(1, rounds + 1):
        multithread_time = multithread_round()
        non_multithread_time = non_multithread_round()
        difference_time = non_multithread_time - multithread_time
        percentage_difference = difference_time / multithread_time * 100
        percentage_string = f"{percentage_difference:.2f}%"

        multithread_time_list.append(multithread_time)
        non_multithread_time_list.append(non_multithread_time)

        print(
            f"{round_number:^{width_round}} | "
            f"{multithread_time:^{width_multithread},} | "
            f"{non_multithread_time:^{width_non_multithread},} | "
            f"{difference_time:^{width_difference},} | "
            f"{percentage_string:^{width_percentage}}"
        )

    # TOTAL row
    total_multithread_time = sum(multithread_time_list)
    total_non_multithread_time = sum(non_multithread_time_list)
    total_difference_time = total_non_multithread_time - total_multithread_time
    total_percentage_difference = total_difference_time / total_multithread_time * 100
    total_percentage_string = f"{total_percentage_difference:.2f}%"

    print("-" * len(header))
    print(
        f"{'TOTAL':^{width_round}} | "
        f"{total_multithread_time:^{width_multithread},} | "
        f"{total_non_multithread_time:^{width_non_multithread},} | "
        f"{total_difference_time:^{width_difference},} | "
        f"{total_percentage_string:^{width_percentage}}"
    )

    # AVERAGE row
    average_multithread_time = total_multithread_time // rounds
    average_non_multithread_time = total_non_multithread_time // rounds
    average_difference_time = average_non_multithread_time - average_multithread_time
    average_percentage_difference = average_difference_time / average_multithread_time * 100
    average_percentage_string = f"{average_percentage_difference:.2f}%"

    print(
        f"{'AVERAGE':^{width_round}} | "
        f"{average_multithread_time:^{width_multithread},} | "
        f"{average_non_multithread_time:^{width_non_multithread},} | "
        f"{average_difference_time:^{width_difference},} | "
        f"{average_percentage_string:^{width_percentage}}"
    )


if __name__ == "__main__":
    run_tests()
